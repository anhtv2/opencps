/**
 * OpenCPS is the open source Core Public Services software
 * Copyright (C) 2016-present OpenCPS community
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */

package org.opencps.sample.staff.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.opencps.sample.staff.model.Staff;
import org.opencps.sample.staff.model.StaffModel;
import org.opencps.sample.staff.model.StaffSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Staff service. Represents a row in the &quot;staff_Staff&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.opencps.sample.staff.model.StaffModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StaffImpl}.
 * </p>
 *
 * @author trungnt
 * @see StaffImpl
 * @see org.opencps.sample.staff.model.Staff
 * @see org.opencps.sample.staff.model.StaffModel
 * @generated
 */
@JSON(strict = true)
public class StaffModelImpl extends BaseModelImpl<Staff> implements StaffModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a staff model instance should use the {@link org.opencps.sample.staff.model.Staff} interface instead.
	 */
	public static final String TABLE_NAME = "staff_Staff";
	public static final Object[][] TABLE_COLUMNS = {
			{ "staffId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "departmentId", Types.BIGINT },
			{ "fullName", Types.VARCHAR },
			{ "birthDay", Types.TIMESTAMP },
			{ "address", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "phoneNumber", Types.VARCHAR },
			{ "position", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table staff_Staff (staffId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,departmentId LONG,fullName VARCHAR(75) null,birthDay DATE null,address VARCHAR(75) null,email VARCHAR(75) null,phoneNumber VARCHAR(75) null,position VARCHAR(75) null,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table staff_Staff";
	public static final String ORDER_BY_JPQL = " ORDER BY staff.fullName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY staff_Staff.fullName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.sample.staff.model.Staff"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.sample.staff.model.Staff"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Staff toModel(StaffSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Staff model = new StaffImpl();

		model.setStaffId(soapModel.getStaffId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDepartmentId(soapModel.getDepartmentId());
		model.setFullName(soapModel.getFullName());
		model.setBirthDay(soapModel.getBirthDay());
		model.setAddress(soapModel.getAddress());
		model.setEmail(soapModel.getEmail());
		model.setPhoneNumber(soapModel.getPhoneNumber());
		model.setPosition(soapModel.getPosition());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Staff> toModels(StaffSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Staff> models = new ArrayList<Staff>(soapModels.length);

		for (StaffSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.opencps.sample.staff.model.Staff"));

	public StaffModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _staffId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStaffId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _staffId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Staff.class;
	}

	@Override
	public String getModelClassName() {
		return Staff.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("staffId", getStaffId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("departmentId", getDepartmentId());
		attributes.put("fullName", getFullName());
		attributes.put("birthDay", getBirthDay());
		attributes.put("address", getAddress());
		attributes.put("email", getEmail());
		attributes.put("phoneNumber", getPhoneNumber());
		attributes.put("position", getPosition());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long staffId = (Long)attributes.get("staffId");

		if (staffId != null) {
			setStaffId(staffId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long departmentId = (Long)attributes.get("departmentId");

		if (departmentId != null) {
			setDepartmentId(departmentId);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		Date birthDay = (Date)attributes.get("birthDay");

		if (birthDay != null) {
			setBirthDay(birthDay);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String phoneNumber = (String)attributes.get("phoneNumber");

		if (phoneNumber != null) {
			setPhoneNumber(phoneNumber);
		}

		String position = (String)attributes.get("position");

		if (position != null) {
			setPosition(position);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getStaffId() {
		return _staffId;
	}

	@Override
	public void setStaffId(long staffId) {
		_staffId = staffId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getDepartmentId() {
		return _departmentId;
	}

	@Override
	public void setDepartmentId(long departmentId) {
		_departmentId = departmentId;
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@JSON
	@Override
	public Date getBirthDay() {
		return _birthDay;
	}

	@Override
	public void setBirthDay(Date birthDay) {
		_birthDay = birthDay;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public String getPosition() {
		if (_position == null) {
			return StringPool.BLANK;
		}
		else {
			return _position;
		}
	}

	@Override
	public void setPosition(String position) {
		_position = position;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Staff.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Staff toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Staff)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StaffImpl staffImpl = new StaffImpl();

		staffImpl.setStaffId(getStaffId());
		staffImpl.setGroupId(getGroupId());
		staffImpl.setCompanyId(getCompanyId());
		staffImpl.setUserId(getUserId());
		staffImpl.setUserName(getUserName());
		staffImpl.setCreateDate(getCreateDate());
		staffImpl.setModifiedDate(getModifiedDate());
		staffImpl.setDepartmentId(getDepartmentId());
		staffImpl.setFullName(getFullName());
		staffImpl.setBirthDay(getBirthDay());
		staffImpl.setAddress(getAddress());
		staffImpl.setEmail(getEmail());
		staffImpl.setPhoneNumber(getPhoneNumber());
		staffImpl.setPosition(getPosition());
		staffImpl.setDescription(getDescription());

		staffImpl.resetOriginalValues();

		return staffImpl;
	}

	@Override
	public int compareTo(Staff staff) {
		int value = 0;

		value = getFullName().compareTo(staff.getFullName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Staff)) {
			return false;
		}

		Staff staff = (Staff)obj;

		long primaryKey = staff.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Staff> toCacheModel() {
		StaffCacheModel staffCacheModel = new StaffCacheModel();

		staffCacheModel.staffId = getStaffId();

		staffCacheModel.groupId = getGroupId();

		staffCacheModel.companyId = getCompanyId();

		staffCacheModel.userId = getUserId();

		staffCacheModel.userName = getUserName();

		String userName = staffCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			staffCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			staffCacheModel.createDate = createDate.getTime();
		}
		else {
			staffCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			staffCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			staffCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		staffCacheModel.departmentId = getDepartmentId();

		staffCacheModel.fullName = getFullName();

		String fullName = staffCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			staffCacheModel.fullName = null;
		}

		Date birthDay = getBirthDay();

		if (birthDay != null) {
			staffCacheModel.birthDay = birthDay.getTime();
		}
		else {
			staffCacheModel.birthDay = Long.MIN_VALUE;
		}

		staffCacheModel.address = getAddress();

		String address = staffCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			staffCacheModel.address = null;
		}

		staffCacheModel.email = getEmail();

		String email = staffCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			staffCacheModel.email = null;
		}

		staffCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = staffCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			staffCacheModel.phoneNumber = null;
		}

		staffCacheModel.position = getPosition();

		String position = staffCacheModel.position;

		if ((position != null) && (position.length() == 0)) {
			staffCacheModel.position = null;
		}

		staffCacheModel.description = getDescription();

		String description = staffCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			staffCacheModel.description = null;
		}

		return staffCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{staffId=");
		sb.append(getStaffId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", departmentId=");
		sb.append(getDepartmentId());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", birthDay=");
		sb.append(getBirthDay());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", phoneNumber=");
		sb.append(getPhoneNumber());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("org.opencps.sample.staff.model.Staff");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>staffId</column-name><column-value><![CDATA[");
		sb.append(getStaffId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentId</column-name><column-value><![CDATA[");
		sb.append(getDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthDay</column-name><column-value><![CDATA[");
		sb.append(getBirthDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneNumber</column-name><column-value><![CDATA[");
		sb.append(getPhoneNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Staff.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Staff.class };
	private long _staffId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _departmentId;
	private String _fullName;
	private Date _birthDay;
	private String _address;
	private String _email;
	private String _phoneNumber;
	private String _position;
	private String _description;
	private Staff _escapedModel;
}